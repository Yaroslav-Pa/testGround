--Git
git reset (hard, mixed, soft)
Перенос на вказаний коміт, 
hard - повністю видаляє зміни 
mixed - відправляє зміни у unstaged
soft - відправляє зміни у staged
з комітів що були відмінені

interactive rebase 
процес переносу змін з однієї гілки на базу іншої гілки
interactive додає можливість змінювати та редагувати зроблені комміти

git patch
де факто це cherry pick але зі створенням файлу (який можна відправити)
create
git format-patch -1 [hash] -o [dir]
apply
git am --3way --ignore-space-change [.\patches\0001-patch.patch]

---TS 
exhaustive check
Exhaustive Type Checking is when your static compiler checks that you're not leaving a possibility unchecked.
Тож якщо у тебе А може бути "name" або "surname", та є swith chase то ти має оброботати усі можливі варіації, а exhaustive check перевіряє що ти "виснажив" усі варіації
https://www.jackfranklin.co.uk/blog/typescript-exhaustive-branches/

---JS
guard clause
це просто перевірка, яка негайно завершує функцію, або з return, або з винятком.
https://refactoring.guru/uk/replace-nested-conditional-with-guard-clauses

--Переписування callbacks на Promises й на async/await
Початковий callback 
function fetchData(callback) {
  setTimeout(() => {
    callback(null, 'Data received');
  }, 1000);
}

fetchData((error, data) => {
  if (error) {
    console.error(error);
  } else {
    console.log(data);
  }
});

Promises:
function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('Data received');
    }, 1000);
  });
}

fetchData()
  .then(data => console.log(data))
  .catch(error => console.error(error));

async/await:
async function fetchData() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve('Data received');
    }, 1000);
  });
}
async function getData() {
  try {
    const data = await fetchData();
    console.log(data);
  } catch (error) {
    console.error(error);
  }
}
getData();


--Обертання чогось у Promise
function wrapSyncInPromise() {
  return new Promise((resolve, reject) => {
    try {
      const result = syncOperation(); // Виконуємо операцію
      resolve(result);                // Якщо успіх — викликаємо resolve
    } catch (error) {
      reject(error);                  // Якщо сталася помилка — reject
    }
  });
}

--RxJs
- бібліотека для створення асинхроних та подійно-орентованих програм за допомогою observable collections


as
dataas
dataasd
asd
asd
asdd
asd